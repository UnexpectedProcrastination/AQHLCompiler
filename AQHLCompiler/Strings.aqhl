function StringLength(s) {
	var oldS = s;
	
	while (*s) s++;
	
	return s - oldS;
}

function StringEqual(a, b) {
	var c = *a++;
	var d = *b++;

	while (c || d) {
		return !# if c != d;
		
		c = *a++;
		d = *b++;
	}
	
	return true;
}

function StringCopy(dest, src) {
	while (*dest++ = *src++);
}

function StringAppend(dest, src) {
	while (*dest) dest++;
	
	StringCopy(dest, src);
}

function StringFirst(s, c) {
	var oldS = s;

	for (var char; char = *s; s++) {
		if (char == c) return oldS - s;
	}
	
	return -1;
}

function StringLast(s, c) {
	var oldS = s;
	var idx = -1;

	for (var char; char = *s; s++) {
		if (char == c) idx = oldS - s;
	}
	
	return idx;
}

array local digitLut[100] = {
	0x3030, 0x3031, 0x3032, 0x3033, 0x3034, 0x3035, 0x3036, 0x3037, 0x3038, 0x3039, 
	0x3130, 0x3131, 0x3132, 0x3133, 0x3134, 0x3135, 0x3136, 0x3137, 0x3138, 0x3139, 
	0x3230, 0x3231, 0x3232, 0x3233, 0x3234, 0x3235, 0x3236, 0x3237, 0x3238, 0x3239, 
	0x3330, 0x3331, 0x3332, 0x3333, 0x3334, 0x3335, 0x3336, 0x3337, 0x3338, 0x3339, 
	0x3430, 0x3431, 0x3432, 0x3433, 0x3434, 0x3435, 0x3436, 0x3437, 0x3438, 0x3439, 
	0x3530, 0x3531, 0x3532, 0x3533, 0x3534, 0x3535, 0x3536, 0x3537, 0x3538, 0x3539, 
	0x3630, 0x3631, 0x3632, 0x3633, 0x3634, 0x3635, 0x3636, 0x3637, 0x3638, 0x3639, 
	0x3730, 0x3731, 0x3732, 0x3733, 0x3734, 0x3735, 0x3736, 0x3737, 0x3738, 0x3739, 
	0x3830, 0x3831, 0x3832, 0x3833, 0x3834, 0x3835, 0x3836, 0x3837, 0x3838, 0x3839, 
	0x3930, 0x3931, 0x3932, 0x3933, 0x3934, 0x3935, 0x3936, 0x3937, 0x3938, 0x3939, 
};

function IntToString(buffer, num) {
	
	if (num == 0) {
		*(buffer++) = '0';
		*(buffer++) = 0;
		return;
	}
	
	// We don't have unsigned division, and -32768 is still -32768 after being negated, so the division wouldn't work right
	if (num == -32768) {
		StringCopy(buffer, "-32768");
		return;
	}
	
	if (num < 0) {
		*(buffer++) = '-';
		num = -num;
	}
	
	var digits = [2];
	var digitCount = 0;
	
	
	while (num #>= 10) {
		digits[digitCount++] = num % 100;
		
		num /= 100;
	}
	
	if (num) {
		*(buffer++) = num + '0';
	}
	
	while (digitCount) {
		var digit = digitLut[digits[--digitCount]];
	
		*(buffer++) = digit #>> 8;
		*(buffer++) = digit & 0xFF;
	}
	
	*(buffer++) = 0;
}

function StringToInt(buffer, success) {

	*success = true;
	
	var result = 0;
	
	var first = *buffer;
	
	var negative = false;
	
	if (first == '-') {
		buffer++;
		negative = true;
	}
	else if (first == '+') {
		buffer++;
	}
	
	if (*buffer == 0) {
		*success = false;
		return result;
	}
	
	for (var c; c = *buffer; buffer++) {
		if (c >= '0' && c <= '9') {
			result *= 10;
			result += c - '0';
		} else {
			*success = false;
			break;
		}
	}
	
	return negative ? result : -result;
}